https://www.youtube.com/watch?v=3LNHxezPi1I

인공지능으로 얼굴 인식을 해 보자 - Python

얼굴 추적 : Face Tracking
얼굴 인식 : Face Recognition

Face Detection : 얼굴 감지
사진 한 장에서 얼굴의 위치가 어디인지 알아내는 방법

Face Tracking : 얼굴 추적
동영상에서 얼굴 탐지를 한 번 하고, 추적 알고리즘을 통해 따라다니게 하는 방법

Detection : 사진 하나
Tracking : 동영상(Detection의 결과를 하나하나 추적하는 느낌)

Face Recognition : 얼굴 인식
두 장의 사진이 있다고 한다면, 
특정 인물(ex.김혜수)의 사진을 이미 알고 있는 상태에서
새로운 사진에서 누가 김혜수인지 알아내는 것

import dlib, cv2
# dlib for Face Detection, Face Recognition
# cv2 : openCV(이미지 작업)

import numpy as numpy # 연산 작업을 위해
import matplotlib.pyplot as plt # 결과물을 그리기 위해
import matplotlib.patches as patches 
import matplotlib.patheffects as path_effets

detector = dlib.get_frontal_face_detector() # 얼굴 탐지 모델
sp = dlib.shape_predictor('models/shape_predictor_68_face_landmarks.dat') # 얼굴 랜드마크 탐지 모델
facerec = dlib.face_recognition_model_v1('models/dlib_face_recognition_resnet_model_v1.dat') # 얼굴 인식 모델

# 위의 모델 파일들을 다운로드 해야 함(다운로드 중)

def find_faces(img) : # 얼굴을 찾는 함수 # input을 RGB 이미지로 받는다
    dets = detector(img, 1) # 얼굴을 찾은 결과물들이 dets에 대입

    if len(dets) == 0 : # dets의 크기가 0, 즉, 얼굴을 하나도 못 찾았다면
        return np.empty(0), np.empty(0), np.empty(0) # 모두 0으로 반환, 얼굴을 못찾으면 여기서 logic이 끝난다

    rects, shapes = [], [] # 결과물을 저장할 변수 설정
    shapes_np = np.zeros((len(dets), 68, 2), dtype = np.int) # 얼굴의 랜드마크, 얼굴에서 68개의 점을 구함
    for k, d in enumerate(dets) : # 얼굴을 3개 찾았다면 3번 루프를 돈다, 얼굴의 개수만큼 루프를 돈다
        rect = ((d.lift(), d.top()), (d.right(), d.bottom())) 얼굴에서 왼쪽, 위쪽, 오른쪽, 아래쪽 좌표들을 rect에 대입
        rects.append(rect) # rects에 차곡차곡 append

        shape = sp(imt, d) # 얼굴의 랜드마크를 구한다, img와 사각형을 넣으면 shape의 68개의 점이 대입된다

        # convert dlib shape to numpy array
        for i in range(0, 68) :
            shape_np[k][i] = (shape.part(i.x, shape.part(i), y))

            shapes.append(shape) # 랜드마크들을 shapes라는 변수에 append

    return rects, shapes, shapes_np # 얼굴을 찾는 함수 끝

# 얼굴을 인코드한다?
# 이미지 속 사람 얼굴에 생성된 랜드마크 정보들을 Encode 하게 되면
# 128개의 Vector들이 생성되는데, 이 숫자들로 사람의 얼굴을 구분한다!
# 이 Vector들의 거리가 얼마큼 머냐 가까우냐에 따라 동일인물인지 아닌지 판단한다


def encode_faces(img, shapes) : # 얼굴을 인코드 하는 함수
    faces_descriptors = []
    for shape in shapes :
        face_descriptor = facerec.compute_face_descriptor(img, shape) # compute_face_descriptor() : 얼굴을 인코딩한다, ()에 전체이미지와 랜드마크들이 들어감
        face_descriptors.append(np.array(face_descriptor)) # 결괏값을 numpy array로 변환하여 차곡차곡 쌓아준다
    return np.array(face_descriptors) # 그 결괏값을 반환한다


# 순서
# 1. Face Detection으로 얼굴을 찾아낸다
# 2. Face Landmark Detection으로 얼굴의 랜드마크를 찾아낸다(랜드마크 : 눈, 코, 입 등 얼굴 특징 추출에 있어서 중요한 부분들)
# 3. Face Encoding으로 얼굴을 인코딩한다


# 우리가 미리 저장해놓은 사용자들의 얼굴에 인코드 된 데이터를 미리 저장해두기
# ex) 동백꽃 필 무렵의 동백이 용식이 등의 사진들을 미리 저장

# 이미지 경로 지정 (유튜브에서는 영화 매트릭스 인물 사용)
img_paths = {
    'neo' : 'img/neo.jpg',
    'trinity' : 'img/trinity.jpg',
    'morpheus' : 'img/morpheus.jpg',
    'smith' : 'img/smith.jpg'
} 

# 우리가 계산한 결과를 저장할 변수를 만들어 둠
decs = {
    'neo' : None,
    'tinity' : None,
    'morpheus' : None,
    'smith' : None
}

for name, img_path in img_paths.items() :
    img_bgr = cv2.imread(img_path) # cv2.imread()로 이미지 로드, bgr 형식의 이미지가 나옴
    imt_rgb = cv2.cvtColor(imt_bgr, cv2.COLOR_BRG2RGB) # 이것을 rgb로 바꿈(cvtColor : 컬러 체계를 변경)

    _, img_shapes = find_faces(imt_rgb) # 랜드마크들을 받아온다
    descs[name] = encode_faces(imt_rgb, img_shapes)[0] # encode_faces 함수에 전체 이미지와 각 사람의 랜드마크를 넣어준다
                                                       # 인코딩된 결과를 각 사람의 이름에 맞게 저장해준다
np.save('img/descs.npy', descs) # 위의 결과를 numpy array로 저장(np.save)
print(descs)


# 저장해 둔 각 인물들의 이미지를 바탕으로 얼굴 인식을 하기 위한 새로운 이미지 불러들이기
# Compute Input
img_bar = cv2.imread('img/matrix5.jpg')
img_rgb = cv2.cvtColor(imt_bar, cv2.COLOR_BRG2RGB)

rects, shapes, _ = find_faces(imt_rgb)
descriptors = encode_faces(img_rgb, shapes)

# Visualize Output
fig, ax = plt.subplots(1, figsize = (20, 20))
ax.imshow(img_rgb)

for i, desc in enumerate(descriptors) : # descriptors 만큼 loop를 돈다

    found = False
    for name, saved_desc = in descs.items() : # 얼굴 인코드 한 것들을 저장해 놓은 descs에서 하나씩 꺼내옴
        dist = np.linalg.norm([desc] - saved_desc, axis = 1) 
# np.linalg.norm(a-b) : a, b 벡터 사이의 유클리드 거리를 구한다
#  
        if dist < 0.6 : # 0.6 이하의 거리를 가진다면, 찾았다라고 정의함(0.6이 가장 예측결과가 좋다는 게 학계의 정설)
            found = True

            # 그리는 부분 / 찾게 되면 이름을 써라!
            text = ax.text(rects[i][0][0], rects[i][0][1], name, color = 'b',
                                            fontsize = 40, fontweight = 'bold')
            
            text.set_path_effects([path_effects.Stroke(linewidth = 10, foreground = 'white'), path_effect])

            # 얼굴 부분에 사각형을 그림
            rect = patches.Rectangle(rects[i][0],
                            rects[i][1][1] - rects[i][0][1],
                            rects[i][1][0] - rects[i][0][0]]],
                            linewidth = 2, edgecolor = 'w', facecolor = 'none')
            ax.add_patch(rect)

            break
        if not found : # 얼굴을 찾았는데 누군지 모를 때 (unknown)
            ax.text(rects[i][0][0], rects[i][0][1], 'unknown',
                    color = 'r', fontsize = 20, fontweight = 'bold')
            rect = patches.Rectangle(rects[i][0], 
                                     rects[i][1][1] - rects[i][0][1],
                                     rects[i][1][0] - rects[i][0][0],
                                     linewidth = 2, edgecolor = 'r', facecolor = 'none')
            ax.add_patch(rect)

plt.show()